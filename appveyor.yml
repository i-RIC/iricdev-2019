version: '{branch}-{build}'

skip_commits:
  files:
    - .github/workflows/*
    - README.md

branches:
  only:
  - 2019

# QT 5.14 is only available with VS2019 on appveyor
image: Visual Studio 2019

# When update access token, use the following pages:
# * https://ci.appveyor.com/api-keys
# * https://ci.appveyor.com/account/<APPVEYOR_ACCOUNT_NAME>/tools/encrypt
environment:
  iric_access_token:
    secure: HoNMU0SsYDs+p/uzOhA6tUowlfLN02GXEeHQdUsE+G4=
  scharlton2_access_token:
    secure: aHOn1rsVBVVMMSOz1L/sh4JmUooKq1WsJTCVuPfQoNc=
  kskinoue0612_access_token:
    secure: sJfz9sGe/Ka0KfZlytp1GeLDgBWE5AwChQHXosJlx/w=
  BUILD_TOOLS: OFF
  CL: /MP
  GENERATOR: "Ninja Multi-Config"
  SGEN: ninja-x64
  TCL_EXE: ActiveTcl-8.6.9.8609.2-MSWin32-x64-5ccbd9ac8.exe

# called before clone
init:
  - if "%Configuration%"=="Debug"   (set config=debug)
  - if "%Configuration%"=="Release" (set config=release)

  - ps: |
      Write-Output "*****************************************************"
      Write-Output "*** Need versions.[cmd,ps1] before repo is cloned ***"
      Write-Output "*****************************************************"
      Push-Location $env:TEMP
      C:\WINDOWS\system32\curl.exe -L -O "https://raw.githubusercontent.com/$env:APPVEYOR_REPO_NAME/$env:APPVEYOR_REPO_COMMIT/versions.cmd" 2>&1 | Out-Null
      C:\WINDOWS\system32\curl.exe -L -O "https://raw.githubusercontent.com/$env:APPVEYOR_REPO_NAME/$env:APPVEYOR_REPO_COMMIT/versions.ps1" 2>&1 | Out-Null
      .\versions.ps1
      Pop-Location

  - ps: |
      Write-Output "*******************"
      Write-Output "*** Environment ***"
      Write-Output "*******************"
      # Sometimes the plaintext of secure variables is displayed so filter out access_tokens
      Get-ChildItem env: | Where-Object { $_.Name -NotMatch "access_token" }

  - ps: |
      Write-Output "*********************"
      Write-Output "*** Tool versions ***"
      Write-Output "*********************"
      Get-Command cmake
      Get-Command ninja
      ninja --version
      Get-Command msbuild
      msbuild -version

clone_folder: C:\iricdev

configuration:
  - Debug
  - Release

# Note mkdir is from Git (C:\Program Files\Git\usr\bin\mkdir.exe)
# It might give unexpected results (use md instead)
before_build:
  - call C:\Qt\5.14.2\msvc2017_64\bin\qtenv2.bat
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cd "%APPVEYOR_BUILD_FOLDER%"
  - copy appveyor_programs.prop programs.prop
  - call versions.cmd
  - curl -L -O https://raw.githubusercontent.com/MestreLion/git-tools/cd87904e0b85d74b1d05f6acbd10553a0ceaceb0/git-restore-mtime
  - python git-restore-mtime
  - if not exist logs (md logs)
  - if not exist downloads (md downloads)
  - ps: |
      if (-Not (Test-Path "C:\ActiveTcl\bin")) {
        # Install tcl (to build sqlite)
        $exePath = "$env:APPVEYOR_BUILD_FOLDER\downloads\$env:TCL_EXE"
        if (-Not (Test-Path ".\downloads\$env:TCL_EXE")) {
          Copy-Item .\$env:TCL_EXE .\downloads\
        }
        cmd /c start /wait $exePath /exenoui /exelog $env:APPVEYOR_BUILD_FOLDER\logs\$env:TCL_EXE.log /exenoupdates /quiet /norestart
        Push-AppveyorArtifact $env:APPVEYOR_BUILD_FOLDER\logs\$env:TCL_EXE.log
        $env:PATH += ";C:\ActiveTcl\bin"
        Get-Command tclsh  # reqd by sqlite
      }
  - ps: |
      if (Test-Path "C:\Strawberry\perl\bin") {
        # add perl to the path (to build openssl)
        $env:PATH = "C:\Strawberry\perl\bin;$env:PATH"
      }
      Get-Command perl  # reqd by openssl

# Since appveyor has time limits (1 hour) we must build in steps
build_script:
  - ps: |

      # Use this to signal when all libraries are up to date
      $env:ALL_LIBS_ARE_BUILT = 'No'

      if (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\vtk-$env:VTK_VER\$env:config" -PathType Container))
      {
        # (~ 50 minutes)
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:vtk-build-$env:config iricdev.proj

        # Everything's okay now build next step
      }
      elseif ( `
        (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\iriclib-$env:IRICLIB_VER"             -PathType Container)) -Or `
        (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\proj-$env:PROJ_VER\$env:config"       -PathType Container)) -Or `
        (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\gdal-$env:GDAL_VER\$env:config"       -PathType Container)) -Or `
        (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\openssl-$env:OPENSSL_VER\$env:config" -PathType Container)) )
      {
        # (~ 48 minutes)
        # iriclib ~ 22 minutes (includes hdf5(~12 min) and poco(~10 min))
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:iriclib-build-$env:config iricdev.proj
        # proj ~ 7 minutes (includes sqlite(~1 min) and libtiff(~1 min))
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:proj-build-$env:config iricdev.proj
        # gdal ~ 15 minutes (includes netcdf-c(~1 min) (depends on proj))
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:gdal-build-$env:config iricdev.proj
        # openssl ~ 3 minutes
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:openssl-build-$env:config iricdev.proj

        # Everything's okay now build next step
      }
      else
      {
        # (~ 33 minutes)
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:appveyor-$env:config iricdev.proj

        # okay all finished
        # now build prepost-gui (develop_v4)
        $env:ALL_LIBS_ARE_BUILT = 'Yes'
      }
  - call create-files.cmd

on_success:
  - ps: |

      # common access tokens hash table
      $tokens = @{}
      $tokens['i-RIC']        = $env:iric_access_token
      $tokens['scharlton2']   = $env:scharlton2_access_token
      $tokens['kskinoue0612'] = $env:kskinoue0612_access_token

      # common headers hash table
      $headers = @{}
      $headers['Authorization'] = "Bearer $($tokens[$env:APPVEYOR_ACCOUNT_NAME])"
      $headers['Content-type']  = "application/json"

      #########################
      # Fire off next build
      #########################
      if (($env:ALL_LIBS_ARE_BUILT -eq 'No') -AND ($env:Configuration -eq 'Release'))
      {
        # build next step
        #
        # POST /api/builds
        # see https://www.appveyor.com/docs/api/projects-builds/#start-build-of-specific-branch-commit

        # build hash table
        $build = @{}
        $build['accountName'] = "$env:APPVEYOR_ACCOUNT_NAME"
        $build['projectSlug'] = "$env:APPVEYOR_PROJECT_SLUG"
        $build['branch']      = "$env:APPVEYOR_REPO_BRANCH"
        $build['commitId']    = "$env:APPVEYOR_REPO_COMMIT"

        # convert build hash table to json
        $build_json = $build | ConvertTo-Json

        # fire
        $response = Invoke-WebRequest -Uri 'https://ci.appveyor.com/api/builds' -Headers $headers -Method POST -Body $build_json
      }
      ###################################
      # Fire off prepost-gui (develop_v4)
      ###################################
      if (($env:ALL_LIBS_ARE_BUILT -eq 'Yes') -AND ($env:Configuration -eq 'Release') -AND (!$env:APPVEYOR_PULL_REQUEST_NUMBER))
      {
        # build latest prepost-gui on develop_v4 branch
        #
        # POST /api/builds
        # see https://www.appveyor.com/docs/api/projects-builds/#start-build-of-branch-most-recent-commit

        # build hash table
        $build = @{}
        $build['accountName'] = "$env:APPVEYOR_ACCOUNT_NAME"
        $build['projectSlug'] = "prepost-gui"
        $build['branch']      = "develop_v4"

        # convert build hash table to json
        $build_json = $build | ConvertTo-Json

        # fire
        $response = Invoke-WebRequest -Uri 'https://ci.appveyor.com/api/builds' -Headers $headers -Method POST -Body $build_json
      }

artifacts:
  - path: lib\install
  - path: logs
  - path: paths.pri
  - path: dirExt.prop

cache:
  - 'lib\install\expat-%EXPAT_VER%         ->   expat.targets, expat.cmake'
  - 'lib\install\gdal-%GDAL_VER%           ->   gdal.targets'
  - 'lib\install\geos-%GEOS_VER%           ->   geos.targets, geos.cmake'
  - 'lib\install\hdf5-%HDF5_VER%           ->   hdf5.targets, hdf5.cmake'
  - 'lib\install\iriclib-%IRICLIB_VER%     ->   iriclib.targets, iriclib.cmake'
  - 'lib\install\libpng-%LIBPNG_VER%       ->   libpng.targets, libpng.cmake'
  - 'lib\install\netcdf-c-%NETCDF_VER%     ->   netcdf-c.targets, netcdf-c.cmake'
  - 'lib\install\openssl-%OPENSSL_VER%     ->   openssl.targets'
  - 'lib\install\poco-%POCO_VER%           ->   poco.targets, poco.cmake'
  - 'lib\install\proj-%PROJ_VER%           ->   proj.targets, proj.cmake'
  - 'lib\install\Qwt-%QWT_VER%             ->   qwt.targets'
  - 'lib\install\shapelib-%SHAPELIB_VER%   ->   shapelib.targets'
  - 'lib\install\sqlite-src-3320300        ->   sqlite.targets'
  - 'lib\install\tiff-%LIBTIFF_VER%        ->   libtiff.targets, libtiff.cmake'
  - 'lib\install\udunits-%UDUNITS_VER%     ->   udunits.targets, udunits.cmake'
  - 'lib\install\vtk-%VTK_VER%             ->   vtk.targets, vtk.cmake'
  - 'lib\install\yaml-cpp-%YAML_CPP_VER%   ->   yaml.targets, yaml.cmake'
  - downloads
  - logs
