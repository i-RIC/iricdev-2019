version: '{branch}-{build}'

branches:
  only:
  - 2019

# QT 5.14 is only available with VS2019 on appveyor
image: Visual Studio 2019

environment:
  CL: /MP

# called before clone
init:
  - echo %APPVEYOR_BUILD_WORKER_IMAGE%
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2019" (set GENERATOR="Ninja Multi-Config" && set SGEN=ninja-x64)
  - echo %GENERATOR%
  - echo %Configuration%
  - if "%Configuration%"=="Debug"   (set config=debug)
  - if "%Configuration%"=="Release" (set config=release)
  - set BUILD_TOOLS=OFF
  - FOR /F "tokens=3 delims= " %%i in ('echo %APPVEYOR_BUILD_WORKER_IMAGE%') do set YEAR=%%i
  - echo %YEAR%
  - echo "*** Need versions.ps1 before repo is cloned ***"
  - ps: |
      if ($true) {
        Push-Location $env:TEMP
        C:\WINDOWS\system32\curl.exe -L -O "https://raw.githubusercontent.com/$env:APPVEYOR_REPO_NAME/$env:APPVEYOR_REPO_COMMIT/versions.ps1"
        .\versions.ps1
        Pop-Location
      }
  - echo "*** Environment ***"
  - set
  - echo "*** Tool versions ***"
  - where cmake
  - cmake --version
  - where ninja
  - ninja --version
  - where msbuild
  - msbuild -version

clone_folder: C:\iricdev

configuration:
  - Debug
  - Release

# Note mkdir is from Git (C:\Program Files\Git\usr\bin\mkdir.exe)
# It might give unexpected results (use md instead)
before_build:
  - call C:\Qt\5.14.2\msvc2017_64\bin\qtenv2.bat
  - if "%SGEN%"=="ninja-x64"   ( call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat" )
  - cd "%APPVEYOR_BUILD_FOLDER%"
  - copy appveyor_programs.prop programs.prop
  - call versions.cmd
  - set BUILD_TOOLS=OFF
  - if not exist logs (md logs)
  - if not exist downloads (md downloads)
  - ps: |
      if (Test-Path ".\lib\install" -PathType Container) {
        # remove old versions
        # Remove-Item -Recurse -Force -exclude cgnslib-$env:CGNSLIB_VER      .\lib\install\cgnslib-*
        # Remove-Item -Recurse -Force -exclude expat-$env:EXPAT_VER          .\lib\install\expat-*
        # Remove-Item -Recurse -Force -exclude gdal-$env:GDAL_VER            .\lib\install\gdal-*
        # Remove-Item -Recurse -Force -exclude geos-$env:GEOS_VER            .\lib\install\geos-*
        # Remove-Item -Recurse -Force -exclude hdf5-$env:HDF5_VER            .\lib\install\hdf5-*
        # Remove-Item -Recurse -Force -exclude iriclib-$env:IRICLIB_VER      .\lib\install\iriclib-*
        # Remove-Item -Recurse -Force -exclude libpng-$env:LIBPNG_VER        .\lib\install\libpng-*
        # Remove-Item -Recurse -Force -exclude netcdf-c-$env:NETCDF_VER      .\lib\install\netcdf-c-*
        # Remove-Item -Recurse -Force -exclude openssl-$env:OPENSSL_VER      .\lib\install\openssl-*
        # Remove-Item -Recurse -Force -exclude poco-$env:POCO_VER            .\lib\install\poco-*
        # Remove-Item -Recurse -Force -exclude proj-$env:PROJ_VER            .\lib\install\proj-*
        # Remove-Item -Recurse -Force -exclude Qwt-$env:QWT_VER              .\lib\install\Qwt-*
        # Remove-Item -Recurse -Force -exclude shapelib-$env:SHAPELIB_VER    .\lib\install\shapelib-*
        # Remove-Item -Recurse -Force -exclude sqlite-src-3320300            .\lib\install\sqlite-src-*
        # Remove-Item -Recurse -Force -exclude tiff-$env:LIBTIFF_VER         .\lib\install\tiff-*
        # Remove-Item -Recurse -Force -exclude udunits-$env:UDUNITS_VER      .\lib\install\udunits-*
        # Remove-Item -Recurse -Force -exclude vtk-$env:VTK_VER              .\lib\install\vtk-*
        # Remove-Item -Recurse -Force -exclude yaml-cpp-$env:YAML_CPP_VER    .\lib\install\yaml-cpp-*
      }
  - ps: |
      if (-Not (Test-Path "C:\ActiveTcl\bin")) {
        # TODO simplify this
        $exePath = "$env:APPVEYOR_BUILD_FOLDER\downloads\ActiveTcl-8.6.9.8609.2-MSWin32-x64-5ccbd9ac8.exe"
        if (-Not (Test-Path ".\downloads\ActiveTcl-8.6.9.8609.2-MSWin32-x64-5ccbd9ac8.exe")) {
          Copy-Item .\ActiveTcl-8.6.9.8609.2-MSWin32-x64-5ccbd9ac8.exe .\downloads\
        }
        cmd /c start /wait $exePath /exenoui /exelog $env:APPVEYOR_BUILD_FOLDER\logs\ActiveTcl-8.6.9.8609.2-MSWin32-x64-5ccbd9ac8.log /exenoupdates /quiet /norestart
        Push-AppveyorArtifact $env:APPVEYOR_BUILD_FOLDER\logs\ActiveTcl-8.6.9.8609.2-MSWin32-x64-5ccbd9ac8.log
        $env:PATH += ";C:\ActiveTcl\bin"
        Get-Command tclsh  # reqd by sqlite
      }
  - ps: |
      if (Test-Path "C:\Strawberry\perl\bin") {
        $env:PATH = "C:\Strawberry\perl\bin;$env:PATH"
        Get-Command perl  # reqd by openssl
      } else {
        Get-Command perl  # reqd by openssl
      }

# Since appveyor has time limits (1 hour) we must build in steps
build_script:
  - ps: |
      if (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\vtk-$env:VTK_VER\$env:config" -PathType Container))
      {
        # (~ 50 minutes)
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:vtk-build-$env:config iricdev.proj
      }
      elseif ( `
        (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\iriclib-$env:IRICLIB_VER\$env:config" -PathType Container)) -Or `
        (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\proj-$env:PROJ_VER\$env:config"       -PathType Container)) -Or `
        (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\gdal-$env:GDAL_VER\$env:config"       -PathType Container)) -Or `
        (-Not (Test-Path "$env:APPVEYOR_BUILD_FOLDER\lib\install\openssl-$env:OPENSSL_VER\$env:config" -PathType Container)) )
      {
        # (~ 48 minutes)
        # iriclib ~ 8 minutes (includes hdf5(~12 min) and poco(~10 min))
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:iriclib-build-$env:config iricdev.proj
        # proj ~ 7 minutes (includes sqlite(~1 min) and libtiff(~1 min))
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:proj-build-$env:config iricdev.proj
        # gdal ~ 15 minutes (includes netcdf-c(~1 min) (depends on proj))
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:gdal-build-$env:config iricdev.proj
        # openssl ~ 3 minutes
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:openssl-build-$env:config iricdev.proj
      }
      else
      {
        # (~ 33 minutes)
        msbuild -noLogo -verbosity:minimal -maxCpuCount -target:appveyor-$env:config iricdev.proj
      }
  - create-files.cmd

artifacts:
  - path: lib\install
  - path: logs
  - path: paths.pri
  - path: dirExt.prop

cache:
  - 'lib\install\cgnslib-%CGNSLIB_VER%     ->   cgnslib.targets, cgnslib.cmake'
  - 'lib\install\expat-%EXPAT_VER%         ->   expat.targets'
  - 'lib\install\gdal-%GDAL_VER%           ->   gdal.targets'
  - 'lib\install\geos-%GEOS_VER%           ->   geos.targets, geos.cmake'
  - 'lib\install\hdf5-%HDF5_VER%           ->   hdf5.targets, hdf5.cmake'
  - 'lib\install\iriclib-%IRICLIB_VER%     ->   iriclib.targets, iriclib.cmake'
  - 'lib\install\libpng-%LIBPNG_VER%       ->   libpng.targets, libpng.cmake'
  - 'lib\install\netcdf-c-%NETCDF_VER%     ->   netcdf-c.targets, netcdf-c.cmake'
  - 'lib\install\openssl-%OPENSSL_VER%     ->   openssl.targets'
  - 'lib\install\poco-%POCO_VER%           ->   poco.targets, poco.cmake'
  - 'lib\install\proj-%PROJ_VER%           ->   proj.targets, proj.cmake'
  - 'lib\install\Qwt-%QWT_VER%             ->   qwt.targets'
  - 'lib\install\shapelib-%SHAPELIB_VER%   ->   shapelib.targets'
  - 'lib\install\sqlite-src-3320300        ->   sqlite.targets'
  - 'lib\install\tiff-%LIBTIFF_VER%        ->   libtiff.targets, libtiff.cmake'
  - 'lib\install\udunits-%UDUNITS_VER%     ->   udunits.targets, udunits.cmake'
  - 'lib\install\vtk-%VTK_VER%             ->   vtk.targets, vtk.cmake'
  - 'lib\install\yaml-cpp-%YAML_CPP_VER%   ->   yaml.targets, yaml.cmake'
  - downloads
  - logs
